(defvar reveal-network-menu false)
(defpoll wifi-networks :interval "3s"
                       :initial "[]"
                       :run-while reveal-network-menu
                       "scripts/get-wifi-networks")
(defpoll wifi-enabled :interval "3s"
                      :run-while reveal-control-center
                      :initial true
                      "[ $(nmcli radio wifi) == 'enabled' ] && echo true || echo false")

(defwidget network-toggle []
    (box :class "network-buttons widget"
         (box :class "network-buttons-inner"
              (eventbox :class "network-button"
                        :onclick "scripts/toggle-wifi &"
                        :cursor "pointer"
                        (overlay
                                 (label :class "icon"
                                        :text {wifi-enabled ? "" : ""})
                                 (label :class "icon"
                                        :visible {!wifi-enabled}
                                        :text "")))
              (eventbox :class "network-button"
                        :onclick {reveal-network-menu ?
                                  "${EWW_CMD} update reveal-network-menu=false" :
                                  "scripts/hide-control-center-menus && ${EWW_CMD} update reveal-network-menu=true && ${EWW_CMD} update wifi-networks='[]'"}
                        :cursor "pointer"
                        (label :class "network-menu-expand-icon icon"
                               :text {reveal-network-menu ? "" : ""})))))

(defwidget network-menu []
    (revealer :class "network-menu"
              :transition "slidedown"
              :duration transition-duration
              :reveal reveal-network-menu
              (box :orientation "vertical"
                   :space-evenly false
                   :class "widget"
                   (label :class "network-menu-disabled"
                          :visible {!wifi-enabled}
                          :text "WiFi is turned off.")
                   (label :class "network-menu-scanning"
                          :visible {wifi-enabled && arraylength(wifi-networks) == 0}
                          :text "Looking for networks...")
                   (box :class "network-networks"
                        :orientation "vertical"
                        :visible {wifi-enabled}
                        (for network in {jq(wifi-networks, "sort_by(.ssid)")}
                            (eventbox :class "network-menu-item"
                                      :onclick ""
                                      :cursor "pointer"
                                      (box :space-evenly false
                                           :spacing 5
                                           (overlay :class "network-menu-item-icon"
                                                    (label :class "icon"
                                                           :text "")
                                                    (label :class "icon"
                                                           :visible {network.security != ""}
                                                           :text ""))
                                           (label :limit-width 35
                                                  :hexpand true
                                                  :xalign 0
                                                  :text {network.ssid})
                                           (label :class "network-connected"
                                                  :text {network.in_use ? "" : " "})))))
                   (eventbox :class "network-settings-button"
                             :onclick "kitty -e nmtui &"
                             :cursor "pointer"
                             (label :xalign 0
                                    :text "Settings")))))
