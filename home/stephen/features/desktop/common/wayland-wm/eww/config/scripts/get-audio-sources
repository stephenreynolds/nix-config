#!/usr/bin/env bash

EWW_CMD=eww

function getCurSourceName() {
  if ! pactl info &> /dev/null; then return 1; fi
    curSourceName=$(pactl info | awk -F : '/Default Source:/{print $2}')
}

function getCurSource() {
    getCurSourceName
    curSource=$(pactl list sources short | grep $curSourceName | awk '{print $1}')
}

function getCurVol() {
    VOL_LEVEL=$(pactl list sources | grep -A 15 'Source #'"$1"'' | grep 'Volume:' | grep -E -v 'Base Volume:' | awk -F : '{print $3; exit}' | grep -o -P '.{0,3}%' | sed 's/.$//' | tr -d ' ')
}

function getIsMuted() {
    isMuted=$(pactl list sources | grep -A 15 'Source #'"$1"'' | awk '/Mute/ {print $2; exit}')
}

function getSources() {
    sources=$(pactl -f json list sources | jq -Mc 'map(select(.properties["device.class"] != "monitor" and any(.ports[]; .availability != "not available")))')
}

function output() {
    getSources
    getCurSource
    getCurVol "$curSource"
    getIsMuted "$curSource"

    if [ "$isMuted" = "yes" ]; then
        $EWW_CMD update mic-muted=true &
    else
        $EWW_CMD update mic-muted=false &
    fi

    $EWW_CMD update audio-sources="${sources}" &
    $EWW_CMD update audio-source-current="${curSource}" &

    echo $VOL_LEVEL
}

# Print on first run
output

# Print when the volume changes
pactl subscribe 2>/dev/null | {
    while true; do
        {
            read -r event || break
            if ! echo "$event" | grep -e "on card" -e "on source" -e "on server"; then
                continue
            fi
        } &>/dev/null
        output
    done
}
